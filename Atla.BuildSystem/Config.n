using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

using Nett;

namespace Atla.BuildSystem
{
    public class Config
    {
        public mutable rootDir: string;
        public mutable srcDir: string;
        public mutable outDir: string;
        
        // TOMLライブラリのNettはsetterがないと動かないのでそれ用
        mutable _package: Package;
        public package: Package {
            get { _package }
            set { _package = value }
        }
        
        mutable _bin: Bin = Bin();
        public bin: Bin {
            get { _bin }
            set { _bin = value }
        }
        
        public setProjectRoot(rootDir: string): void {
            this.rootDir = rootDir;
            this.srcDir = Path.Combine(rootDir, "src");
            this.outDir = Path.Combine(rootDir, "out");
        }
        
        public projectName(): string {
            Path.GetFileName(rootDir);
        }
        
        public outFile(): string {
            def binName = if (bin.name.IsEmpty()) (if (package.name.IsEmpty()) projectName() else package.name) else bin.name;
            def ext = if (bin._type == BinType.Exe) "exe" else "dll";
            Path.Combine(outDir, $"$binName.$ext");
        }
        
        public static from(filePath: string): Config {
            def raw = Toml.ReadFile(filePath);
            def config = raw.Get();
            config.setProjectRoot(System.IO.Path.GetDirectoryName(filePath));
            config
        }
    }
    
    public class Package {
        mutable _name: string = "";
        public name: string {
            get { _name }
            set { _name = value }
        }
    }
    
    public class Bin {
        mutable _name: string = "";
        public name: string {
            get { _name }
            set { _name = value }
        }
        
        public mutable _type: BinType = BinType.Exe;
        public type: string {
            get { _type.ToString().ToLower() }
            set { _type = match (value) {
                | "lib" => BinType.Lib
                | "exe" => BinType.Exe
            } }
        }
    }
    
    public enum BinType {
        | Lib
        | Exe
    }
}
